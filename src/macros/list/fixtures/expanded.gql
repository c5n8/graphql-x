directive @list(field: String!) on OBJECT

directive @relatedList on FIELD_DEFINITION

scalar DateTime

type Todo @list(field: "todos") {
  id: ID!
  createdAt: DateTime
  description: String
  priority: Int
  budget: Float
  isDone: Boolean
  assignee: User
  tags(input: TagListInput): [Tag!] @relatedList
}

# start: @list Todo

extend type Query {
  todos(input: TodoListInput): [Todo!]!
}

input TodoListInput {
  where: TodoWhereInput
  cursor: TodoCursorInput
  orderBy: [TodoOrderByInput!]
  take: Int
  skip: Int
}

input TodoWhereInput {
  id: IDFilterInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  priority: IntFilterInput
  budget: FloatFilterInput
  isDone: BooleanFilterInput
  assignee: UserWhereInput
  tags: TagListRelationFilterInput
  OR: [TodoWhereInput!]
  AND: [TodoWhereInput!]
  NOT: [TodoWhereInput!]
}

input TodoListRelationFilterInput {
  some: TodoWhereInput
  every: TodoWhereInput
  none: TodoWhereInput
}

input TodoCursorInput {
  id: ID
  createdAt: DateTime
  description: String
  priority: Int
  budget: Float
  isDone: Boolean
}

input TodoOrderByInput {
  createdAt: SortOrderInput
  description: SortOrderInput
  priority: SortOrderInput
  budget: SortOrderInput
  isDone: SortOrderInput
  assignee: UserOrderByInput
  tags: OrderByRelationAggregateInput
}

# end: @list Todo

type User {
  id: ID!
  email: String
  todos: [Todo!]
}

# start: @list User

input UserWhereInput {
  id: IDFilterInput
  email: StringFilterInput
  todos: TodoListRelationFilterInput
  OR: [UserWhereInput!]
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserOrderByInput {
  email: SortOrderInput
  todos: OrderByRelationAggregateInput
}

# end: @list User

type Tag {
  id: ID!
  title: String
  todos: [Todo!]
}

# start: @list Tag

input TagWhereInput {
  id: IDFilterInput
  title: StringFilterInput
  todos: TodoListRelationFilterInput
  OR: [TagWhereInput!]
  AND: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagListRelationFilterInput {
  some: TagWhereInput
  every: TagWhereInput
  none: TagWhereInput
}

input TagListInput {
  where: TagWhereInput
  cursor: TagCursorInput
  orderBy: [TagOrderByInput!]
  take: Int
  skip: Int
}

input TagCursorInput {
  id: ID
  title: String
}

input TagOrderByInput {
  title: SortOrderInput
  todos: OrderByRelationAggregateInput
}

# end: @list Tag

input IDFilterInput {
  equals: ID
  in: [ID!]
  not: IDFilterInput
}

input StringFilterInput {
  equals: String
  in: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringFilterInput
}

scalar QueryMode

input FloatFilterInput {
  equals: Float
  in: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilterInput
}

input IntFilterInput {
  equals: Int
  in: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilterInput
}

input BooleanFilterInput {
  equals: Boolean
  not: BooleanFilterInput
}

input DateTimeFilterInput {
  equals: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilterInput
}

input SortOrderInput {
  sort: SortOrder
  nulls: NullsOrder
}

scalar SortOrder

scalar NullsOrder

input OrderByRelationAggregateInput {
  _count: SortOrder
}
