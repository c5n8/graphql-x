directive @list(field: String!) on OBJECT

scalar DateTime

type Thing @list(field: "things") {
  x1: [[String]]
}

extend type Query {
  things(input: ThingListInput): [Thing!]!
}

input ThingListInput {
  where: ThingWhereInput
  cursor: ThingCursorInput
  orderBy: [ThingOrderByInput!]
  take: Int
  skip: Int
}

input ThingWhereInput {
  OR: [ThingWhereInput!]
  AND: [ThingWhereInput!]
  NOT: [ThingWhereInput!]
}

input ThingCursorInput

input ThingOrderByInput

input IDFilterInput {
  equals: ID
  in: [ID!]
  not: IDFilterInput
}

input StringFilterInput {
  equals: String
  in: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringFilterInput
}

scalar QueryMode

input FloatFilterInput {
  equals: Float
  in: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilterInput
}

input IntFilterInput {
  equals: Int
  in: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilterInput
}

input BooleanFilterInput {
  equals: Boolean
  not: BooleanFilterInput
}

input DateTimeFilterInput {
  equals: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilterInput
}

input SortOrderInput {
  sort: SortOrder
  nulls: NullsOrder
}

scalar SortOrder

scalar NullsOrder

input OrderByRelationAggregateInput {
  _count: SortOrder
}
