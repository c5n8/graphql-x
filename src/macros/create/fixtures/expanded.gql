directive @create on OBJECT

directive @readonly on FIELD_DEFINITION

scalar DateTime

type Post @create {
  id: ID!
  createdAt: DateTime @readonly
  title: String!
  body: String
  tags: [String!]
  category: Category
}

extend type Mutation {
  createPost(input: CreatePostInput!): CreatePostOutput!
}

input CreatePostInput {
  data: CreatePostDataInput
  dryRun: Boolean
}

input CreatePostDataInput {
  title: String
  body: String
  tags: [String]
  category: CreatePostCategoryRelationInput
}

input CreatePostCategoryRelationInput {
  id: ID!
}

union CreatePostOutput
  @output(fields: ["issues", "result"])
  @member(type: "CreatePostResult", signature: "result")
  @member(type: "CreatePostValidation", signature: "issues") =
  | CreatePostResult
  | CreatePostValidation

type CreatePostResult {
  result: Post!
}

type CreatePostValidation {
  issues: CreatePostValidationIssues!
}

scalar CreatePostValidationIssues @issues(input: "CreatePostInput")

type Category {
  id: ID!
}

directive @output(fields: [String!]!) on UNION

directive @member(type: String!, signature: String!) repeatable on UNION

directive @issues(input: String!) on SCALAR
