directive @create on OBJECT

directive @update on OBJECT

directive @delete on OBJECT

directive @list(field: String!) on OBJECT

directive @item on OBJECT

directive @readonly on FIELD_DEFINITION

scalar DateTime

type Post @create @update @delete @item {
  id: ID!
  createdAt: DateTime @readonly
  title: String!
  body: String
  tags: [String!]
  category: Category
}

type Mutation {
  createPost(input: CreatePostInput!): CreatePostOutput!
}

input CreatePostInput {
  data: CreatePostDataInput
  dryRun: Boolean
}

input CreatePostDataInput {
  title: String
  body: String
  tags: [String]
  category: CreatePostCategoryRelationInput
}

input CreatePostCategoryRelationInput {
  id: ID!
}

union CreatePostOutput
  @signature(fields: ["issues", "result"])
  @member(type: "CreatePostResult", signature: "result")
  @member(type: "CreatePostValidation", signature: "issues") =
  | CreatePostResult
  | CreatePostValidation

type CreatePostResult {
  result: Post!
}

type CreatePostValidation {
  issues: CreatePostValidationIssues!
}

scalar CreatePostValidationIssues @issues(input: "CreatePostInput")

extend type Mutation {
  updatePost(input: UpdatePostInput!): UpdatePostOutput!
}

input UpdatePostInput {
  id: ID!
  data: UpdatePostDataInput
  dryRun: Boolean
}

input UpdatePostDataInput {
  title: String
  body: String
  tags: [String]
  category: UpdatePostCategoryRelationInput
}

input UpdatePostCategoryRelationInput {
  id: ID!
}

union UpdatePostOutput
  @signature(fields: ["issues", "result"])
  @member(type: "UpdatePostResult", signature: "result")
  @member(type: "UpdatePostValidation", signature: "issues") =
  | UpdatePostResult
  | UpdatePostValidation

type UpdatePostResult {
  result: Post!
}

type UpdatePostValidation {
  issues: UpdatePostValidationIssues!
}

scalar UpdatePostValidationIssues @issues(input: "UpdatePostInput")

extend type Mutation {
  deletePost(input: DeletePostInput!): Void
}

input DeletePostInput {
  id: ID!
}

type Query {
  post(input: PostItemInput!): Post
}

input PostItemInput {
  id: ID!
}

type Category {
  id: ID!
}

type Todo @list(field: "todos") {
  id: ID!
  createdAt: DateTime
  description: String
  priority: Int
  budget: Float
  isDone: Boolean
  assignee: User
  tags: [Tag!]
}

extend type Query {
  todos(input: TodoListInput): [Todo!]!
}

input TodoListInput {
  take: Int
  where: TodoWhereInput
  orderBy: [TodoOrderByInput!]
}

input TodoWhereInput {
  id: IDFilterInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  priority: IntFilterInput
  budget: FloatFilterInput
  isDone: BooleanFilterInput
  assignee: UserWhereInput
  tags: TagListRelationFilterInput
  OR: [TodoWhereInput!]
  AND: [TodoWhereInput!]
  NOT: [TodoWhereInput!]
}

input TodoListRelationFilterInput {
  some: TodoWhereInput
  every: TodoWhereInput
  none: TodoWhereInput
}

input TodoOrderByInput {
  createdAt: SortOrderInput
  description: SortOrderInput
  priority: SortOrderInput
  budget: SortOrderInput
  isDone: SortOrderInput
  assignee: UserOrderByInput
  tags: OrderByRelationAggregateInput
}

type User {
  id: ID!
  email: String
  todos: [Todo!]
}

input UserWhereInput {
  id: IDFilterInput
  email: StringFilterInput
  todos: TodoListRelationFilterInput
  OR: [UserWhereInput!]
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserOrderByInput {
  email: SortOrderInput
  todos: OrderByRelationAggregateInput
}

type Tag {
  id: ID!
  title: String
  todos: [Todo!]
}

input TagWhereInput {
  id: IDFilterInput
  title: StringFilterInput
  todos: TodoListRelationFilterInput
  OR: [TagWhereInput!]
  AND: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagListRelationFilterInput {
  some: TagWhereInput
  every: TagWhereInput
  none: TagWhereInput
}

directive @signature(fields: [String!]!) on UNION

directive @member(type: String!, signature: String!) repeatable on UNION

directive @issues(input: String!) on SCALAR

scalar Void

input IDFilterInput {
  equals: ID
  in: [ID!]
  not: IDNotFilterInput
}

input IDNotFilterInput {
  equals: ID
  in: [ID!]
}

input StringFilterInput {
  equals: String
  in: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNotFilterInput
}

input StringNotFilterInput {
  equals: String
  in: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
}

input FloatFilterInput {
  equals: Float
  in: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNotFilterInput
}

input FloatNotFilterInput {
  equals: Float
  in: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
}

input IntFilterInput {
  equals: Int
  in: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNotFilterInput
}

input IntNotFilterInput {
  equals: Int
  in: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

input BooleanFilterInput {
  equals: Boolean
  not: BooleanNotFilterInput
}

input BooleanNotFilterInput {
  equals: Boolean
}

input DateTimeFilterInput {
  equals: DateTime
  in: DateTime
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNotFilterInput
}

input DateTimeNotFilterInput {
  equals: DateTime
  in: DateTime
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
}

input SortOrderInput {
  sort: SortOrder
  nulls: NullsOrder
}

input OrderByRelationAggregateInput {
  _count: SortOrder
}

scalar QueryMode

scalar SortOrder

scalar NullsOrder
